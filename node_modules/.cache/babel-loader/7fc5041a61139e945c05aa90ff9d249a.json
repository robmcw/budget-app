{"ast":null,"code":"var _jsxFileName = \"/Users/robo/budget-app/src/containers/Dashboard/Dashboard.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport MonthSpendCard from '../../components/MonthSpendCard.js/MonthSpendCard';\nimport SpendInputRow from '../../components/SpendInputRow/SpendInputRow';\nimport FirebaseConfig from '../../firebase.config';\nimport firebase from 'firebase/app';\n\nrequire(\"firebase/database\"); // Initialize Firebase\n\n\nfirebase.initializeApp(FirebaseConfig);\n\nconst Dashboard = () => {\n  const inputRef = useRef();\n  const [budget, setBudget] = useState(0);\n  const [enteredMonth, setEnteredMonth] = useState(null);\n  const [enteredSpendRent, setEnteredSpendRent] = useState(null);\n  const [enteredSpendGroceries, setEnteredSpendGroceries] = useState(null);\n  const [enteredSpendTransport, setEnteredSpendTransport] = useState(null);\n  const [enteredSpendEntertainment, setEnteredSpendEntertainment] = useState(null);\n  const [savedMonthSpend, setSavedMonthSpend] = useState([{\n    category: {\n      entertainment: 100,\n      groceries: 200,\n      rent: 300,\n      transport: 400\n    },\n    month: \"April\"\n  }]); //Fetch data from DB \n\n  useEffect(() => {\n    firebase.database().ref('spend').orderByChild('/dateCreated').on('value', snapshot => {\n      console.log(snapshot);\n      let spend = [];\n      snapshot.forEach(spendSnapshot => {\n        spend.push(spendSnapshot.val());\n      });\n      console.log(spend[1].category);\n      setSavedMonthSpend(spend);\n    }); // (\"Fetching firebase to GET spending...\")\n    // fetch(`https://budget-app-c0755.firebaseio.com/spend.json`).then(reponse => reponse.json()\n    // ).then(responseData => {\n    //     const loadedSpend = [];\n    //     for (const key in responseData) {\n    //         loadedSpend.push({\n    //             [key]: {\n    //                 category: responseData[key].category,\n    //                 month: responseData[key].month,\n    //             }\n    //         });\n    //     }\n    //     console.log(loadedSpend)\n    //     setSavedMonthSpend(loadedSpend)\n    // })\n  }, []); //Fetch data from DB \n\n  useEffect(() => {\n    \"Fetching firebase to GET budgets...\";\n    fetch(`https://budget-app-c0755.firebaseio.com/budgets.json`).then(reponse => reponse.json()).then(responseData => {\n      const budgetData = responseData;\n      setBudget(budgetData);\n    });\n  }, []); //Spend inputs\n\n  const spendInput = {\n    month: enteredMonth,\n    dateCreated: 0 - Date.now(),\n    category: {\n      rent: enteredSpendRent,\n      groceries: enteredSpendGroceries,\n      transport: enteredSpendTransport,\n      entertainment: enteredSpendEntertainment\n    }\n  };\n\n  const enteredSpendHandler = (input, cat) => {\n    switch (cat) {\n      case 'rent':\n        setEnteredSpendRent(input);\n        break;\n\n      case 'groceries':\n        setEnteredSpendGroceries(input);\n        break;\n\n      case 'transport':\n        setEnteredSpendTransport(input);\n        break;\n\n      case 'entertainment':\n        setEnteredSpendEntertainment(input);\n        break;\n\n      default:\n        console.error('ERROR: NO CATEGORIES MATCHED');\n    }\n  };\n\n  const dbObject = {\n    budgets: {\n      category: {\n        rent: {\n          name: \"Rent\",\n          percentage: 30,\n          monthly: 700,\n          annual: 1000,\n          category: \"Essential\"\n        },\n        groceries: {\n          name: \"Groceries\",\n          percentage: 8,\n          monthly: 150,\n          annual: 1000,\n          category: \"Essential\"\n        },\n        transport: {\n          name: \"Transport\",\n          percentage: 4,\n          monthly: 90,\n          annual: 1000,\n          category: \"Essential\"\n        },\n        entertainment: {\n          name: \"Entertainment\",\n          percentage: 12,\n          monthly: 310,\n          annual: 1000,\n          category: \"Luxury\"\n        }\n      }\n    }\n  }; // Call Firebase DB\n\n  const addSpendHandler = spend => {\n    console.log(\"Fetching firebase to POST...\");\n    fetch(`https://budget-app-c0755.firebaseio.com/spend.json`, {\n      method: 'POST',\n      body: JSON.stringify(spend),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      console.log(spend);\n      setSavedMonthSpend(prevInput => [...prevInput, {\n        \"localId\": { ...spend\n        }\n      }]);\n    });\n  };\n\n  const months = savedMonthSpend.map(row => {\n    const data = row;\n    const id = \"010101\";\n    return /*#__PURE__*/React.createElement(MonthSpendCard, {\n      key: id,\n      spending: data,\n      month: data.month,\n      budget: budget,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 20\n      }\n    });\n  });\n  const inputRows = Object.keys(dbObject.budgets.category).map(catKey => {\n    return /*#__PURE__*/React.createElement(SpendInputRow, {\n      key: catKey,\n      cat: catKey,\n      enteredSpendHandler: enteredSpendHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 16\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-white px-8 flex h-20 border-b border-gray-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"font-bold text-2xl block my-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, \"Monthly spending\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-7xl mx-auto px-8 py-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"min-w-full max-w-full \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"bg-white px-4 flex h-20 border-b border-gray-300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"font-bold text-2m block my-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 33\n    }\n  }, \"Record new month\")), /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"px-4 hover:bg-gray-100 transition-all ease-linear duration-200 cursor-pointer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"w-1/2 whitespace-no-wrap border-b border-gray-200\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"px-4 py-4 appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\",\n    type: \"text\",\n    placeholder: \"Month\",\n    \"aria-label\": \"Month\",\n    ref: inputRef,\n    onChange: event => {\n      setEnteredMonth(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 25\n    }\n  }, inputRows)))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    onClick: e => {\n      addSpendHandler(spendInput, e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-7xl mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  }, months))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/robo/budget-app/src/containers/Dashboard/Dashboard.js"],"names":["React","useState","useRef","useEffect","MonthSpendCard","SpendInputRow","FirebaseConfig","firebase","require","initializeApp","Dashboard","inputRef","budget","setBudget","enteredMonth","setEnteredMonth","enteredSpendRent","setEnteredSpendRent","enteredSpendGroceries","setEnteredSpendGroceries","enteredSpendTransport","setEnteredSpendTransport","enteredSpendEntertainment","setEnteredSpendEntertainment","savedMonthSpend","setSavedMonthSpend","category","entertainment","groceries","rent","transport","month","database","ref","orderByChild","on","snapshot","console","log","spend","forEach","spendSnapshot","push","val","fetch","then","reponse","json","responseData","budgetData","spendInput","dateCreated","Date","now","enteredSpendHandler","input","cat","error","dbObject","budgets","name","percentage","monthly","annual","addSpendHandler","method","body","JSON","stringify","headers","response","prevInput","months","map","row","data","id","inputRows","Object","keys","catKey","event","target","value","e"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport MonthSpendCard from '../../components/MonthSpendCard.js/MonthSpendCard'\nimport SpendInputRow from '../../components/SpendInputRow/SpendInputRow'\nimport FirebaseConfig from '../../firebase.config'\nimport firebase from 'firebase/app';\nrequire(\"firebase/database\");\n\n// Initialize Firebase\nfirebase.initializeApp(FirebaseConfig);\n\nconst Dashboard = () => {\n    const inputRef = useRef();\n    const [budget, setBudget] = useState(0);\n    const [enteredMonth, setEnteredMonth] = useState(null);\n    const [enteredSpendRent, setEnteredSpendRent] = useState(null);\n    const [enteredSpendGroceries, setEnteredSpendGroceries] = useState(null);\n    const [enteredSpendTransport, setEnteredSpendTransport] = useState(null);\n    const [enteredSpendEntertainment, setEnteredSpendEntertainment] = useState(null);\n    const [savedMonthSpend, setSavedMonthSpend] = useState([\n        {\n            category: {\n                entertainment: 100,\n                groceries: 200,\n                rent: 300,\n                transport: 400\n            },\n            month: \"April\"\n\n        }]\n    );\n\n    //Fetch data from DB \n    useEffect(() => {\n        firebase.database().ref('spend').orderByChild('/dateCreated')\n            .on('value', snapshot => {\n                console.log(snapshot)\n                let spend = [];\n                snapshot.forEach((spendSnapshot) => {\n                    spend.push(spendSnapshot.val())\n                });\n                console.log(spend[1].category);\n                setSavedMonthSpend(spend)\n            });\n\n        // (\"Fetching firebase to GET spending...\")\n        // fetch(`https://budget-app-c0755.firebaseio.com/spend.json`).then(reponse => reponse.json()\n        // ).then(responseData => {\n        //     const loadedSpend = [];\n        //     for (const key in responseData) {\n        //         loadedSpend.push({\n        //             [key]: {\n        //                 category: responseData[key].category,\n        //                 month: responseData[key].month,\n        //             }\n        //         });\n        //     }\n        //     console.log(loadedSpend)\n        //     setSavedMonthSpend(loadedSpend)\n        // })\n    }, []);\n\n\n\n    //Fetch data from DB \n    useEffect(() => {\n        (\"Fetching firebase to GET budgets...\")\n        fetch(`https://budget-app-c0755.firebaseio.com/budgets.json`).then(reponse => reponse.json()\n        ).then(responseData => {\n            const budgetData = responseData;\n            setBudget(budgetData)\n        })\n    }, []);\n\n\n    //Spend inputs\n    const spendInput = {\n        month: enteredMonth,\n        dateCreated: 0 - Date.now(),\n        category: {\n            rent: enteredSpendRent,\n            groceries: enteredSpendGroceries,\n            transport: enteredSpendTransport,\n            entertainment: enteredSpendEntertainment\n        }\n    };\n\n\n    const enteredSpendHandler = (input, cat) => {\n        switch (cat) {\n            case 'rent':\n                setEnteredSpendRent(input)\n                break;\n            case 'groceries':\n                setEnteredSpendGroceries(input)\n                break;\n            case 'transport':\n                setEnteredSpendTransport(input)\n                break;\n            case 'entertainment':\n                setEnteredSpendEntertainment(input)\n                break;\n            default:\n                console.error('ERROR: NO CATEGORIES MATCHED')\n        }\n    };\n\n\n    const dbObject = {\n        budgets: {\n            category: {\n                rent: {\n                    name: \"Rent\",\n                    percentage: 30,\n                    monthly: 700,\n                    annual: 1000,\n                    category: \"Essential\"\n                },\n                groceries: {\n                    name: \"Groceries\",\n                    percentage: 8,\n                    monthly: 150,\n                    annual: 1000,\n                    category: \"Essential\"\n                },\n                transport: {\n                    name: \"Transport\",\n                    percentage: 4,\n                    monthly: 90,\n                    annual: 1000,\n                    category: \"Essential\"\n                },\n                entertainment: {\n                    name: \"Entertainment\",\n                    percentage: 12,\n                    monthly: 310,\n                    annual: 1000,\n                    category: \"Luxury\"\n                }\n            },\n        },\n    };\n\n    // Call Firebase DB\n\n    const addSpendHandler = spend => {\n        console.log(\"Fetching firebase to POST...\")\n        fetch(`https://budget-app-c0755.firebaseio.com/spend.json`, {\n            method: 'POST',\n            body: JSON.stringify(spend),\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(response => {\n                return response.json();\n            })\n            .then(responseData => {\n                console.log(spend)\n                setSavedMonthSpend(prevInput => [\n                    ...prevInput,\n                    {\n                        \"localId\": {\n                            ...spend\n                        }\n                    }\n                ]);\n            })\n    };\n\n    const months =\n        savedMonthSpend.map(row => {\n            const data = row\n            const id = \"010101\"\n\n            return <MonthSpendCard\n                key={id}\n                spending={data}\n                month={data.month}\n                budget={budget}\n            />;\n        })\n\n    const inputRows = Object.keys(dbObject.budgets.category).map((catKey) => {\n        return <SpendInputRow\n            key={catKey}\n            cat={catKey}\n            enteredSpendHandler={enteredSpendHandler}\n        />;\n    });\n\n    return (\n        <>\n            <div className=\"bg-white px-8 flex h-20 border-b border-gray-300\">\n                <h1 className=\"font-bold text-2xl block my-auto\">Monthly spending</h1>\n            </div>\n            <div className=\"max-w-7xl mx-auto px-8 py-4\">\n                <div className=\"flex flex-col\">\n                    <table className=\"min-w-full max-w-full \">\n                        <thead>\n                            <tr className=\"bg-white px-4 flex h-20 border-b border-gray-300\">\n                                <td className=\"font-bold text-2m block my-auto\">Record new month</td>\n                            </tr>\n                            <tr className=\"px-4 hover:bg-gray-100 transition-all ease-linear duration-200 cursor-pointer\" >\n                                <td className=\"w-1/2 whitespace-no-wrap border-b border-gray-200\">\n                                    <input className=\"px-4 py-4 appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none\"\n                                        type=\"text\"\n                                        placeholder=\"Month\"\n                                        aria-label=\"Month\"\n                                        ref={inputRef}\n                                        onChange={event => {\n                                            setEnteredMonth(event.target.value)\n                                        }}\n                                    >\n                                    </input>\n                                </td>\n                            </tr>\n\n                        </thead>\n                        <tbody >\n                            {inputRows}\n\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <button\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                onClick={e => {\n                    addSpendHandler(spendInput, e)\n                }}>Create</button>\n\n            <div className=\"max-w-7xl mx-auto\">\n                <div className=\"flex flex-col\">\n                    <div className=\"bg-white\">{months}</div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}