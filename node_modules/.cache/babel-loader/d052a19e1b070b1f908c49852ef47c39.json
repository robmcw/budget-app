{"ast":null,"code":"var _jsxFileName = \"/Users/robo/budget-app/src/containers/Dashboard/Dashboard.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport MonthSpendCard from '../../components/MonthSpendCard.js/MonthSpendCard';\nimport SpendInputRow from '../../components/SpendInputRow/SpendInputRow';\nimport FirebaseConfig from '../../firebase.config';\nimport firebase from 'firebase/app';\n\nrequire(\"firebase/database\"); // Initialize Firebase\n\n\nfirebase.initializeApp(FirebaseConfig); // States\n\nconst Dashboard = () => {\n  const inputRef = useRef();\n  const [budget, setBudget] = useState(0);\n  const [enteredMonth, setEnteredMonth] = useState(null);\n  const [enteredSpendRent, setEnteredSpendRent] = useState(null);\n  const [enteredSpendGroceries, setEnteredSpendGroceries] = useState(null);\n  const [enteredSpendTransport, setEnteredSpendTransport] = useState(null);\n  const [enteredSpendEntertainment, setEnteredSpendEntertainment] = useState(null);\n  const [savedMonthSpend, setSavedMonthSpend] = useState(\"loading\"); //Fetch SPEND data from DB \n\n  useEffect(() => {\n    firebase.database().ref('spend').orderByChild('/dateCreated').on('value', snapshot => {\n      let spend = [];\n      snapshot.forEach(spendSnapshot => {\n        spend.push(spendSnapshot.val());\n      });\n      setSavedMonthSpend(spend);\n    });\n  }, []); //Fetch BUDGET data from DB \n\n  useEffect(() => {\n    \"Fetching firebase to GET budgets...\";\n    fetch(`https://budget-app-c0755.firebaseio.com/budgets.json`).then(reponse => reponse.json()).then(responseData => {\n      const budgetData = responseData;\n      setBudget(budgetData);\n    });\n  }, []); // Post new spend to DB\n\n  const addSpendHandler = spend => {\n    console.log(\"Fetching firebase to POST...\");\n    fetch(`https://budget-app-c0755.firebaseio.com/spend.json`, {\n      method: 'POST',\n      body: JSON.stringify(spend),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(() => {\n      setSavedMonthSpend(prevInput => [...prevInput]);\n    }).then(() => {\n      clearFormHandler();\n    });\n  }; // Clear input form helper\n\n\n  const clearFormHandler = () => {\n    Array.from(document.querySelectorAll(\"input\")).forEach(input => input.value = \"\");\n  }; //Spend inputs\n\n\n  const spendInput = {\n    month: enteredMonth,\n    dateCreated: 0 - Date.now(),\n    category: {\n      rent: enteredSpendRent,\n      groceries: enteredSpendGroceries,\n      transport: enteredSpendTransport,\n      entertainment: enteredSpendEntertainment\n    }\n  };\n\n  const enteredSpendHandler = (input, cat) => {\n    switch (cat) {\n      case 'rent':\n        setEnteredSpendRent(input);\n        break;\n\n      case 'groceries':\n        setEnteredSpendGroceries(input);\n        break;\n\n      case 'transport':\n        setEnteredSpendTransport(input);\n        break;\n\n      case 'entertainment':\n        setEnteredSpendEntertainment(input);\n        break;\n\n      default:\n        console.error('ERROR: NO CATEGORIES MATCHED');\n    }\n  }; // Return saved spends in cards\n\n\n  let months = [];\n\n  if (savedMonthSpend !== \"loading\") {\n    months = savedMonthSpend.map(row => {\n      const data = row;\n      const id = Math.random();\n      return /*#__PURE__*/React.createElement(MonthSpendCard, {\n        key: id,\n        spending: data,\n        month: data.month,\n        budget: budget,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 24\n        }\n      });\n    });\n  } else {\n    months = /*#__PURE__*/React.createElement(MonthSpendCard, {\n      key: Math.random(),\n      spending: savedMonthSpend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    });\n  } // Return rows for input spend card. Linked to DB in case categories are ever updated\n\n\n  let inputRows = \"\";\n\n  if (savedMonthSpend !== \"loading\") {\n    inputRows = Object.keys(savedMonthSpend[0].category).map(catKey => {\n      console.log(catKey);\n      return /*#__PURE__*/React.createElement(SpendInputRow, {\n        key: catKey,\n        cat: catKey,\n        enteredSpendHandler: enteredSpendHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 20\n        }\n      });\n    });\n  } // Return JSX\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-white px-8 flex h-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"font-bold text-2xl block my-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, \"Monthly spending \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-3xl\",\n    role: \"img\",\n    \"aria-label\": \"Money emoji\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 83\n    }\n  }, \" \\uD83D\\uDCB8 \"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-7xl mx-8 my-4 px-8 py-4 border-gray-300 border rounded shadow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"min-w-full max-w-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"px-4 hover:bg-gray-100 transition-all ease-linear duration-200 cursor-pointer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"w-1/2 whitespace-no-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \" my-4 appearance-none bg-transparent border-none w-full font-bold leading-tight focus:outline-none\",\n    type: \"text\",\n    placeholder: \"New month name\",\n    \"aria-label\": \"Month\",\n    ref: inputRef,\n    onChange: event => {\n      setEnteredMonth(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, inputRows)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \" my-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    onClick: e => {\n      addSpendHandler(spendInput, e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }, \"Save\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"max-w-7xl mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, months))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/robo/budget-app/src/containers/Dashboard/Dashboard.js"],"names":["React","useState","useRef","useEffect","MonthSpendCard","SpendInputRow","FirebaseConfig","firebase","require","initializeApp","Dashboard","inputRef","budget","setBudget","enteredMonth","setEnteredMonth","enteredSpendRent","setEnteredSpendRent","enteredSpendGroceries","setEnteredSpendGroceries","enteredSpendTransport","setEnteredSpendTransport","enteredSpendEntertainment","setEnteredSpendEntertainment","savedMonthSpend","setSavedMonthSpend","database","ref","orderByChild","on","snapshot","spend","forEach","spendSnapshot","push","val","fetch","then","reponse","json","responseData","budgetData","addSpendHandler","console","log","method","body","JSON","stringify","headers","response","prevInput","clearFormHandler","Array","from","document","querySelectorAll","input","value","spendInput","month","dateCreated","Date","now","category","rent","groceries","transport","entertainment","enteredSpendHandler","cat","error","months","map","row","data","id","Math","random","inputRows","Object","keys","catKey","event","target","e"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport MonthSpendCard from '../../components/MonthSpendCard.js/MonthSpendCard'\nimport SpendInputRow from '../../components/SpendInputRow/SpendInputRow'\nimport FirebaseConfig from '../../firebase.config'\nimport firebase from 'firebase/app';\nrequire(\"firebase/database\");\n\n// Initialize Firebase\nfirebase.initializeApp(FirebaseConfig);\n\n// States\nconst Dashboard = () => {\n    const inputRef = useRef();\n    const [budget, setBudget] = useState(0);\n    const [enteredMonth, setEnteredMonth] = useState(null);\n    const [enteredSpendRent, setEnteredSpendRent] = useState(null);\n    const [enteredSpendGroceries, setEnteredSpendGroceries] = useState(null);\n    const [enteredSpendTransport, setEnteredSpendTransport] = useState(null);\n    const [enteredSpendEntertainment, setEnteredSpendEntertainment] = useState(null);\n    const [savedMonthSpend, setSavedMonthSpend] = useState(\"loading\"\n    );\n\n    //Fetch SPEND data from DB \n    useEffect(() => {\n        firebase.database().ref('spend').orderByChild('/dateCreated')\n            .on('value', snapshot => {\n                let spend = [];\n                snapshot.forEach((spendSnapshot) => {\n                    spend.push(spendSnapshot.val())\n                });\n                setSavedMonthSpend(spend)\n            });\n    }, []);\n\n\n\n    //Fetch BUDGET data from DB \n    useEffect(() => {\n        (\"Fetching firebase to GET budgets...\")\n        fetch(`https://budget-app-c0755.firebaseio.com/budgets.json`).then(reponse => reponse.json()\n        ).then(responseData => {\n            const budgetData = responseData;\n            setBudget(budgetData)\n        })\n    }, []);\n\n\n    // Post new spend to DB\n\n    const addSpendHandler = spend => {\n        console.log(\"Fetching firebase to POST...\")\n        fetch(`https://budget-app-c0755.firebaseio.com/spend.json`, {\n            method: 'POST',\n            body: JSON.stringify(spend),\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(response => {\n                return response.json();\n            })\n            .then(() => {\n                setSavedMonthSpend(prevInput => [\n                    ...prevInput,\n                ]);\n            }).then(() => {\n                clearFormHandler()\n            })\n    };\n\n    // Clear input form helper\n    const clearFormHandler = () => {\n        Array.from(document.querySelectorAll(\"input\")).forEach(\n            input => (input.value = \"\")\n        );\n    }\n\n    //Spend inputs\n    const spendInput = {\n        month: enteredMonth,\n        dateCreated: 0 - Date.now(),\n        category: {\n            rent: enteredSpendRent,\n            groceries: enteredSpendGroceries,\n            transport: enteredSpendTransport,\n            entertainment: enteredSpendEntertainment\n        }\n    };\n\n    const enteredSpendHandler = (input, cat) => {\n        switch (cat) {\n            case 'rent':\n                setEnteredSpendRent(input)\n                break;\n            case 'groceries':\n                setEnteredSpendGroceries(input)\n                break;\n            case 'transport':\n                setEnteredSpendTransport(input)\n                break;\n            case 'entertainment':\n                setEnteredSpendEntertainment(input)\n                break;\n            default:\n                console.error('ERROR: NO CATEGORIES MATCHED')\n        }\n    };\n\n\n    // Return saved spends in cards\n    let months = []\n    if (savedMonthSpend !== \"loading\") {\n        months =\n            savedMonthSpend.map(row => {\n                const data = row\n                const id = Math.random()\n                return <MonthSpendCard\n                    key={id}\n                    spending={data}\n                    month={data.month}\n                    budget={budget}\n                />;\n            })\n    } else {\n        months =\n            <MonthSpendCard\n                key={Math.random()}\n                spending={savedMonthSpend}\n            />;\n    }\n\n    // Return rows for input spend card. Linked to DB in case categories are ever updated\n    let inputRows = \"\"\n    if (savedMonthSpend !== \"loading\") {\n        inputRows = Object.keys(savedMonthSpend[0].category).map((catKey) => {\n            console.log(catKey)\n            return <SpendInputRow\n                key={catKey}\n                cat={catKey}\n                enteredSpendHandler={enteredSpendHandler}\n            />;\n        });\n    }\n\n    // Return JSX\n    return (\n        <>\n            <div className=\"bg-white px-8 flex h-20\">\n                <h1 className=\"font-bold text-2xl block my-auto\">Monthly spending <span className=\"text-3xl\" role=\"img\" aria-label=\"Money emoji\"> &#128184; </span> </h1>\n            </div>\n            <div className=\"max-w-7xl mx-8 my-4 px-8 py-4 border-gray-300 border rounded shadow\">\n                <div className=\"flex flex-col\">\n                    <table className=\"min-w-full max-w-full\">\n                        <thead>\n\n                            <tr className=\"px-4 hover:bg-gray-100 transition-all ease-linear duration-200 cursor-pointer\" >\n                                <td className=\"w-1/2 whitespace-no-wrap\">\n                                    <input className=\" my-4 appearance-none bg-transparent border-none w-full font-bold leading-tight focus:outline-none\"\n                                        type=\"text\"\n                                        placeholder=\"New month name\"\n                                        aria-label=\"Month\"\n                                        ref={inputRef}\n                                        onChange={event => {\n                                            setEnteredMonth(event.target.value)\n                                        }}\n                                    >\n                                    </input>\n                                </td>\n                            </tr>\n                        </thead>\n\n                        <tbody >\n                            {inputRows}\n                        </tbody>\n\n                    </table>\n                    <div className=\" my-4\">\n                        <button\n                            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n                            onClick={e => {\n                                addSpendHandler(spendInput, e)\n                            }}>Save</button>\n                    </div>\n                </div>\n            </div >\n            <div className=\"max-w-7xl mx-auto\">\n                <div className=\"flex flex-col\">\n                    <div>{months}</div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}